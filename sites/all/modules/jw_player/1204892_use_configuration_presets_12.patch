diff --git a/jw_player.info b/jw_player.info
index 8780b89..8f8c837 100755
--- a/jw_player.info
+++ b/jw_player.info
@@ -4,5 +4,6 @@ version = VERSION
 core = 7.x
 dependencies[] = image
 dependencies[] = libraries
+dependencies[] = ctools
 files[] = jw_player.module
 files[] = jw_player.theme.inc
\ No newline at end of file
diff --git a/jw_player.install b/jw_player.install
index caa8af2..e707449 100755
--- a/jw_player.install
+++ b/jw_player.install
@@ -5,6 +5,56 @@
  */
 
 /**
+ * Implements hook_schema
+ */
+function jw_player_schema() {
+  $schema['jwplayer_preset'] = array(
+    'description' => 'Stores information of JW Player presets',
+    'export' => array(
+      'key' => 'machine_name',
+      'identifier' => 'jw_player_preset',
+      'default hook' => 'default_jw_player_presets', // Function hook name
+      'api' => array(
+        'owner' => 'jw_player',
+        'api' => 'jw_player_presets', // Base name for api include files.
+        'minimum_version' => 1,
+        'current_version' => 1,
+      ),
+    ),
+    'fields' => array(
+      'preset_name' => array(
+        'type' => 'varchar',
+        'length' => 255,
+        'description' => 'Name for the preset.'
+      ),
+      'machine_name' => array(
+        'type' => 'varchar',
+        'length' => 255,
+        'description' => 'Unique machine name for every configuration preset.'
+      ),
+      'description' => array(
+          'description' => "Provide text summary for the preset",
+          'type' => 'text',
+      ),
+      'settings' => array(
+        'description' => 'Serialized settings array of a given preset.',
+        'type' => 'blob',
+        'size' => 'big',
+        'not null' => FALSE,
+        'serialize' => TRUE,
+      ),
+    ),
+    'unique keys' => array(
+    'machine_name' => array('machine_name'),
+    ),
+    'primary key' => array('machine_name'),
+  );
+
+  return $schema;
+}
+
+
+/**
  * Implements hook_field_schema().
  */
 function jw_player_field_schema($field) {
diff --git a/jw_player.module b/jw_player.module
index 08d868e..599ec6e 100755
--- a/jw_player.module
+++ b/jw_player.module
@@ -3,6 +3,13 @@
  * @file
  *
  * Adds a theme function which allows theme developers to use the JW Player .
+ * @Todo
+ *
+ * "skin" variable in field formatter settings is requied by JW Player field,
+ * With presets being made available and a preset already holding information of
+ * skin, The additional variable seems to be duplicate and can be done away with.
+ * Shall be fixed based on the direction of JW Player field itself.
+ *
  */
 
 /**
@@ -30,6 +37,18 @@ function jw_player_field_info() {
 }
 
 /**
+ * Implements hook_permission
+ */
+function jw_player_permission() {
+  return array(
+    'administer JW Player presets' => array(
+      'title' => t('administer JW Player presets'),
+      'description' => t('Perform administration of JW Player presets'),
+    ),
+  );
+}
+
+/**
  * Implements hook_field_settings_form().
  */
 function jw_player_field_settings_form($field, $instance) {
@@ -446,7 +465,7 @@ function jw_player_theme() {
       'file' => 'jw_player.theme.inc',
     ),
     'jw_player_formatter' => array(
-      'variables' => array('item' => NULL, 'image_style' => NULL, 'skin' => ''),
+      'variables' => array('item' => NULL, 'image_style' => NULL, 'preset' => ''),
       'file' => 'jw_player.theme.inc',
     ),
     'jw_player' => array(
@@ -468,6 +487,7 @@ function jw_player_field_formatter_info() {
       'settings' => array(
         'skin' => '',
         'image_style' => '',
+        'jwplayer_preset' => '',
       ),
     ),
     'jw_player_image' => array(
@@ -523,16 +543,15 @@ function jw_player_field_formatter_settings_form($field, $instance, $view_mode,
     );
   }
   else {
-    $skin_options = array();
-    foreach (jw_player_skins() as $skin) {
-      $skin_options[$skin->uri] = ucfirst($skin->name);
+    // Load existing presets within the system
+    foreach(jw_player_preset_load() as $preset => $item) {
+      $options[$preset] = $item['preset_name'];
     }
-    $element['skin'] = array(
-      '#title' => t('Skin'),
+    $element['jwplayer_preset'] = array(
+      '#title' => t('JW Player presets'),
       '#type' => 'select',
-      '#default_value' => $settings['skin'],
-      '#empty_option' => t('None (default skin)'),
-      '#options' => $skin_options,
+      '#default_value' => ($settings['jwplayer_preset']) ?  $settings['jwplayer_preset'] : FALSE,
+      '#options' => $options,
     );
   }
   return $element;
@@ -544,7 +563,6 @@ function jw_player_field_formatter_settings_form($field, $instance, $view_mode,
 function jw_player_field_formatter_settings_summary($field, $instance, $view_mode) {
   $display = $instance['display'][$view_mode];
   $settings = $display['settings'];
-
   $summary = array();
 
   if ($field['type'] == 'jw_player_field') {
@@ -561,12 +579,18 @@ function jw_player_field_formatter_settings_summary($field, $instance, $view_mod
     }
   }
 
-  $skins = jw_player_skins();
-  if (isset($skins[$settings['skin']])) {
-    $summary[] = t('Skin: @name', array('@name' => $skins[$settings['skin']]->name));
+  $presets = jw_player_preset_load();
+  if (isset($presets[$settings['jwplayer_preset']])) {
+    $summary[] = t('Preset: @name', array('@name' => $presets[$settings['jwplayer_preset']]['preset_name']));
+    $summary[] = t('Description: @description', array('@description' => $presets[$settings['jwplayer_preset']]['description']));
+
+    $settings = $presets[$settings['jwplayer_preset']]['settings'];
+    foreach($settings as $key => $val) {
+      $summary[] = t('@key: @val', array('@key' => $key, '@val' => !empty($val) ? $val : t('Default')));
+    }
   }
   else {
-    $summary[] = t('Default skin');
+    $summary[] = t('Default preset');
   }
 
   $link_types = array(
@@ -611,7 +635,7 @@ function jw_player_field_formatter_view($entity_type, $entity, $field, $instance
       '#theme' => 'jw_player_formatter',
       '#item' => $item,
       '#image_style' => $display['settings']['image_style'],
-      '#skin' => $display['settings']['skin'],
+      '#preset' => $display['settings']['jwplayer_preset'],
     );
   }
   return $element;
@@ -684,3 +708,70 @@ function jw_player_skins($name = NULL) {
   }
   return $skins;
 }
+
+/*
+ * ctools specific functions
+ */
+
+/**
+* Implements hook_ctools_plugin_api().
+*
+*/
+function jw_player_ctools_plugin_api($owner, $api) {
+  if ($owner == 'jw_player' && $api == 'jw_player_presets') {
+    return array('version' => 1);
+  }
+}
+
+/**
+ * Implements hook_default_jwplayer_presets().
+ */
+
+function jw_player_default_jw_player_presets() {
+  $export = array();
+
+  $jwplayer_preset = new stdClass;
+  $jwplayer_preset->disabled = FALSE; /* Edit this to true to make a default jwplayer_preset disabled initially */
+  $jwplayer_preset->api_version = 1;
+  $jwplayer_preset->preset_name = 'Large';
+  $jwplayer_preset->machine_name = 'large';
+  $jwplayer_preset->description = 'Displays video in default 640x480 resolution ';
+  $jwplayer_preset->settings = array(
+    'width' => '640',
+    'height' => '480',
+  );
+
+  $export['default_large'] = $jwplayer_preset;
+  return $export;
+}
+
+/**
+ * Implements hook_ctools_plugin_directory().
+ */
+function jw_player_ctools_plugin_directory($module, $type) {
+  // Load the export_ui plugin.
+  if ($type =='export_ui') {
+    return 'plugins/export_ui';
+  }
+}
+
+/**
+ * Load a given preset(s)
+ * @param string $machine_name
+ * @return array
+ */
+function jw_player_preset_load($machine_name = NULL){
+  if (isset($machine_name)){
+    $items = ctools_export_crud_load('jwplayer_preset', $machine_name);
+
+    // CTools returns an object, so we explictly typecast it to array before returning
+    $items =  (array) $items;
+  }
+  else {
+    $result = ctools_export_crud_load_all('jwplayer_preset');
+    foreach($result as $key => $item) {
+      $items[$key] = (array) $item;
+    }
+  }
+  return $items;
+}
\ No newline at end of file
diff --git a/jw_player.theme.inc b/jw_player.theme.inc
index 8f14ed1..32eeb0e 100755
--- a/jw_player.theme.inc
+++ b/jw_player.theme.inc
@@ -41,13 +41,17 @@ function theme_jw_player_widget($variables) {
  *   An associative array containing:
  *   - item: An array of image data.
  *   - image_style: An optional image style.
+ *   - preset : An array of JW Player formatter information.
+ *
  *
  * @ingroup themeable
  */
 function theme_jw_player_formatter($variables) {
   $file = (object) $variables['item'];
-  $preview_image = $file->preview_image;
-
+  if (!empty($file->preview_image)) {
+    $preview_image = $file->preview_image;
+    $info = image_get_info($preview_image->uri);
+  }
 
   if ($variables['image_style']) {
     $image_path = image_style_path($variables['image_style'], $preview_image->uri);
@@ -58,20 +62,36 @@ function theme_jw_player_formatter($variables) {
   }
 
   // Get the image dimensions. These will overwrite the dimensions of the player if they aren't set
-  $info = image_get_info($preview_image->uri);
+
   $path = libraries_get_path('jwplayer');
 
-  $config = array(
-    'id' => 'jw_player_' . $file->fid,
-    'flashplayer' => file_create_url($path . '/player.swf'),
-    'width' => (isset($variables['width']) ? $variables['width'] : $info['width']),
-    'height' => (isset($variables['height']) ? $variables['height'] : $info['height']),
-    'file' => file_create_url($file->uri),
-    'image' => file_create_url($preview_image->uri),
-  );
-
-  if ($variables['skin']) {
-    $config['skin'] = file_create_url($variables['skin']);
+  if (!empty($variables['preset'])) {
+    $preset = jw_player_preset_load($variables['preset']);
+
+    $settings = $preset['settings'];
+    $skin = jw_player_skins($settings['skin']);
+
+    $config = array(
+      'id' => 'jw_player_' . $file->fid,
+      'flashplayer' => file_create_url($path . '/player.swf'),
+      'width' => (isset($settings['width']) ? $settings['width'] : $info['width']),
+      'height' => (isset($settings['height']) ? $settings['height'] : $info['height']),
+      'file' => file_create_url($file->uri),
+      'skin' => is_object($skin) ? file_create_url($skin->uri) : FALSE,
+    );
+  }
+  else {
+    $config = array(
+      'id' => 'jw_player_' . $file->fid,
+      'flashplayer' => file_create_url($path . '/player.swf'),
+      'width' => (isset($variables['width']) ? $variables['width'] : $info['width']),
+      'height' => (isset($variables['height']) ? $variables['height'] : $info['height']),
+      'file' => file_create_url($file->uri),
+      'image' => file_create_url($preview_image->uri),
+    );
+    if ($variables['skin']) {
+      $config['skin'] = file_create_url($variables['skin']);
+    }
   }
 
   // Allow other modules to alter the configuration of the player before it's rendered.
diff --git a/plugins/export_ui/jw_player_ctools_export_ui.inc b/plugins/export_ui/jw_player_ctools_export_ui.inc
new file mode 100644
index 0000000..c20ca48
--- /dev/null
+++ b/plugins/export_ui/jw_player_ctools_export_ui.inc
@@ -0,0 +1,133 @@
+<?php
+
+/**
+ * Define this Export UI plugin.
+ */
+
+$plugin = array(
+  'schema' => 'jwplayer_preset',
+  'access' => 'administer JW Player presets',
+  'menu' => array(
+    'menu item' => 'jw_player',
+    'menu title' => 'JW Player presets',
+    'menu prefix' => 'admin/config/media',
+    'menu description' => 'Administer JW Player presets.',
+  ),
+
+  'title singular' => t('preset'),
+  'title plural' => t('presets'),
+  'title singular proper' => t('JW Player preset'),
+  'title plural proper' => t('JW Player presets'),
+
+  // - Abbreviated. - //
+
+  'form' => array(
+    'settings' => 'jw_player_ctools_export_ui_form',
+    'validate' => 'jw_player_ctools_export_ui_form_validate',
+  ),
+);
+
+/**
+ *Implements hook_ctools_export_ui_form
+ */
+function jw_player_ctools_export_ui_form(&$form, &$form_state) {
+  $preset = $form_state['item'];
+  $settings = $preset->settings;
+
+  /**
+   * This is a Hack, CTools adds a hierarchy for export_key in form of
+   * $form['info][$export_key]
+   * see Line no: 1007 of ctools/plugins/export_ui/ctools_export_ui.class.php
+   *
+   * FAPI machine names object doesn't seem to work well with fields present in
+   * differnt levels of hierarchy, Hence we move the fields over to
+   * same hierarchical level.
+   */
+  // $form['preset_name'] = $form['info']['preset_name'];
+  unset($form['info']);
+  $form['preset_name'] = array(
+    '#type' => 'textfield',
+    '#size' => 20,
+    '#maxlength' => 255,
+    '#title' => t('Preset name'),
+    '#description' => t('Enter name for the preet.'),
+    '#default_value' =>  $preset->preset_name,
+    '#required' => true,
+    '#weight' => 0
+  );
+
+  $form['info']['machine_name'] = array(
+    '#title' => t('Machine name'),
+    '#type' => 'machine_name',
+    '#default_value' => $preset->machine_name,
+    '#machine_name' => array(
+      'exists' => 'jw_player_preset_load',
+      'source' => array('preset_name'),
+    ),
+    '#weight' => 1,
+    '#description' => t('Enter the name to the new page It must be unique and contain only alphanumeric characters and underscores.'),
+  );
+
+  $form['settings'] = array(
+    '#tree' => true,
+    '#weight' => 2,
+   );
+
+  $form['settings']['width'] = array(
+    '#type' => 'textfield',
+    '#size' => 10,
+    '#title' => t('width'),
+    '#description' => t('Enter width for player.'),
+    '#field_suffix' => ' ' . t('pixels'),
+    '#default_value' => $settings['width'],
+    '#required' => true,
+    '#weight' => 5
+  );
+
+  $form['settings']['height'] = array(
+    '#type' => 'textfield',
+    '#size' => 10,
+    '#title' => t('Height'),
+    '#description' => t('Enter height for player'),
+    '#field_suffix' => ' ' . t('pixels'),
+    '#default_value' => $settings['height'],
+    '#required' => true,
+    '#weight' => 6
+  );
+
+  $skin_options = array();
+  foreach (jw_player_skins() as $skin) {
+    $skin_options[$skin->name] = ucfirst($skin->name);
+  }
+
+  $form['settings']['skin'] = array(
+    '#title' => t('Skin'),
+    '#type' => 'select',
+    '#default_value' => !empty($settings['skin']) ? $settings['skin']: FALSE,
+    '#empty_option' => t('None (default skin)'),
+    '#options' => $skin_options,
+  );
+
+  $form['description'] = array(
+    '#type' => 'textarea',
+    '#size' => 10,
+    '#title' => t('decription'),
+    '#description' => t('Summary for preset'),
+    '#default_value' => $preset->description,
+
+    '#weight' => 4
+  );
+}
+
+/**
+ * Valdiator for jw_player_ctools_export_ui_form
+ */
+function jw_player_ctools_export_ui_form_validate($form, &$form_state) {
+  $vals = $form_state['values'];
+  if (!is_numeric($vals['settings']['width'])) {
+    form_set_error('width', 'Only numeric values allowed for width' );
+  }
+  if (!is_numeric($vals['settings']['height'])) {
+    form_set_error('width', 'Only numeric values allowed for height' );
+  }
+}
\ No newline at end of file
